{"version":3,"sources":["lib/utilities.js","components/WordFilter.js","App.js","hooks/InputHooks.js","serviceWorker.js","index.js"],"names":["pointMap","a","e","i","o","u","l","n","s","t","r","d","g","b","c","m","p","f","h","v","w","y","k","j","x","q","z","scoreWord","word","split","reduce","score","letter","toLowerCase","onlyTheseLetters","query","queryLetters","wordLetters","wildcards","amt","curr","validWord","forEach","indexOf","splice","filterWordList","RegExp","concat","withoutWildcards","replace","wordList","filter","length","every","includes","sort","map","charAt","toUpperCase","slice","WordFilter","_ref","react_default","createElement","className","key","defaultProps","App","_useControlledValue","initialValue","arguments","undefined","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","value","target","useControlledValue","_useControlledValue2","queryValue","handleQueryChange","maxLength","placeholder","onChange","aria-label","role","components_WordFilter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62a936c9.chunk.js","sourcesContent":["const pointMap = {\n    a: 1, e: 1, i: 1, o: 1, u: 1, l: 1, n: 1, s: 1, t: 1, r: 1, d: 2, g: 2, b: 3, c: 3, m: 3, p: 3, f: 3, h: 3, v: 3, w: 3, y: 3, k: 5, j: 8, x: 8, q: 10, z: 10\n};\n\nexport const scoreWord = word => {\n    return word.split('').reduce((score, letter) => {\n        score += pointMap[letter.toLowerCase()];\n        return score;\n            }, 0);\n}\n\nexport const onlyTheseLetters = (query, word) => {\n    const queryLetters = query.split('');\n    const wordLetters = word.split('');\n    let wildcards = queryLetters.reduce((amt, curr) => {\n        if (curr === '?') amt += 1;\n        return amt;\n    }, 0);\n    let validWord = true;\n    wordLetters.forEach(letter => {\n        const indexOf = queryLetters.indexOf(letter);\n        if (indexOf === -1) {\n            if (wildcards > 0) {\n                wildcards -= 1;\n            } else {\n                validWord = false;\n            }\n        } else {\n            queryLetters.splice(indexOf, -1)\n        }\n    });\n    return validWord;\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport wordList from '../lib/dictionary.json';\nimport { scoreWord, onlyTheseLetters } from '../lib/utilities.js';\n\nfunction filterWordList(query) {\n  const re = new RegExp(`[${query}]`, 'i');\n  const withoutWildcards = query.replace(/\\?/g, '');\n  return wordList\n        .filter(word => word.length <= (query.length))\n        .filter(word => withoutWildcards.split('').every(letter => word.includes(letter)))\n        .filter(word => onlyTheseLetters(query, word))\n        .sort((a, b) => scoreWord(b) - scoreWord(a))\n        .splice(0, 50)\n        .map(word => `${word.charAt(0).toUpperCase()}${word.slice(1)} (${scoreWord(word)})`)\n}\n\nfunction WordFilter({ query }) {\n  const words = filterWordList(query);\n    return (\n        <div className=\"words__container\">\n            {query\n                ? filterWordList(query).map(word => <div className=\"word__item\" key={word}>{word}</div>)\n                : null\n            }\n        </div>\n    );\n}\n\nWordFilter.propTypes = {\n  query: PropTypes.string\n};\n\nWordFilter.defaultProps = {\n  query: ''\n};\n\nexport default WordFilter;\n","import React from \"react\";\nimport { useControlledValue } from \"./hooks\";\nimport WordFilter from \"./components/WordFilter\";\n\nfunction App() {\n  const [queryValue, handleQueryChange] = useControlledValue(\"\");\n  return (\n    <div className=\"App\">\n      <h1 className=\"wordmark__h1\">Scrabble Master</h1>\n      <p className=\"submark__p\">\n        Be a master of Scrabble & look cool during family game night.\n      </p>\n      <input\n        className=\"wordQuery__input\"\n        maxLength=\"9\"\n        placeholder=\"What letters do you have?\"\n        value={queryValue}\n        onChange={handleQueryChange}\n      />\n      <h5>\n        Wildcard tiles are allowed. Just use ? in place of your blank tile\n        <span aria-label=\"This is a fire emoji\" role=\"img\">\n          ðŸ”¥\n        </span>\n      </h5>\n      <WordFilter query={queryValue} />\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\n/**\n * Custom hook for setting up basic controlled inputs\n * \n * @param {String} initialValue - setup state with initial value\n * @returns {Array} Array - [inputValue: String, handleChange: Function]\n */\nexport function useControlledValue(initialValue = '') {\n  const [inputValue, setInputValue] = useState(initialValue);\n\n  function handleChange({target: { value }}) {\n    if (value !== inputValue) {\n      setInputValue(value);\n    }\n  }\n\n  return [inputValue, handleChange]\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}